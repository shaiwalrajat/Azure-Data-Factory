{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "cduuatadf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df009pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_INPUT",
								"type": "DatasetReference"
							},
							"name": "ReadCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_PIVOT",
								"type": "DatasetReference"
							},
							"name": "sinkpivot"
						}
					],
					"transformations": [
						{
							"name": "pivotdata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderDate as date 'dd-MM-yyyy',",
						"          ProductKey as short,",
						"          Country as string,",
						"          EnglishProductName as string,",
						"          SalesAmount as double,",
						"          TaxAmt as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadCsv",
						"ReadCsv pivot(groupBy(EnglishProductName),",
						"     pivotBy(Country),",
						"     {} = sum(SalesAmount),",
						"     columnNaming: 'Sales$N$V',",
						"     lateral: true) ~> pivotdata",
						"pivotdata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkpivot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df010unpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Unpivot",
								"type": "DatasetReference"
							},
							"name": "ReadTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Unpivot1",
								"type": "DatasetReference"
							},
							"name": "sinkdata"
						}
					],
					"transformations": [
						{
							"name": "unpivotcolumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EnglishProductName as string,",
						"          SalesAustralia as double,",
						"          SalesCanada as double,",
						"          SalesFrance as double,",
						"          SalesGermany as double,",
						"          SalesIndia as double,",
						"          SalesItaly as double,",
						"          {SalesUnited States} as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReadTable",
						"ReadTable unpivot(output(",
						"          Country as string,",
						"          SalesAmount as double",
						"     ),",
						"     ungroupBy(EnglishProductName),",
						"     lateral: true,",
						"     ignoreNullPivots: true) ~> unpivotcolumn",
						"unpivotcolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkdata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df011Rank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_RankCsv",
								"type": "DatasetReference"
							},
							"name": "ReadCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Rank",
								"type": "DatasetReference"
							},
							"name": "sinkdata"
						}
					],
					"transformations": [
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EnglishProductName as string,",
						"          SalesAmount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadCsv",
						"ReadCsv rank(desc(SalesAmount, true),",
						"     output(Ranks as long),",
						"     dense: true) ~> rank1",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkdata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df012WindowTX')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_INPUT",
								"type": "DatasetReference"
							},
							"name": "ReadCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Window",
								"type": "DatasetReference"
							},
							"name": "sinkdata"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "aggregatedata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderDate as date 'dd-MM-yyyy',",
						"          ProductKey as short,",
						"          Country as string,",
						"          EnglishProductName as string,",
						"          SalesAmount as double,",
						"          TaxAmt as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadCsv",
						"aggregatedata window(over(OrderYear = year(OrderDate),",
						"          OrderMonth = month(OrderDate)),",
						"     asc(OrderDate, true),",
						"     CummSales = sum(TotalSales)) ~> window1",
						"ReadCsv aggregate(groupBy(OrderDate),",
						"     TotalSales = sum(SalesAmount)) ~> aggregatedata",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkdata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df013Union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Union1",
								"type": "DatasetReference"
							},
							"name": "ReadCSV"
						},
						{
							"dataset": {
								"referenceName": "DF_Union3",
								"type": "DatasetReference"
							},
							"name": "ReadCsv2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Union",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as short,",
						"          EMPNAME as string,",
						"          SALARY as integer,",
						"          Month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 5,",
						"     ignoreNoFilesFound: false) ~> ReadCSV",
						"source(output(",
						"          SALARY as integer,",
						"          Month as string,",
						"          EMPNAME as string,",
						"          EMPID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadCsv2",
						"ReadCSV, ReadCsv2 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df014lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Sales",
								"type": "DatasetReference"
							},
							"name": "ReadSales"
						},
						{
							"dataset": {
								"referenceName": "DF_Product",
								"type": "DatasetReference"
							},
							"name": "ReadProduct"
						},
						{
							"dataset": {
								"referenceName": "DF_Customer",
								"type": "DatasetReference"
							},
							"name": "ReadCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Lookup",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookupProduct"
						},
						{
							"name": "lookupCustomer"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as short,",
						"          CustomerKey as short,",
						"          SalesAmount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadSales",
						"source(output(",
						"          ProductKey as short,",
						"          EnglishProductName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadProduct",
						"source(output(",
						"          CustomerKey as short,",
						"          FullName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadCustomer",
						"ReadSales, ReadProduct lookup(ReadSales@ProductKey == ReadProduct@ProductKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupProduct",
						"lookupProduct, ReadCustomer lookup(ReadSales@CustomerKey == ReadCustomer@CustomerKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupCustomer",
						"lookupCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductKey = ReadSales@ProductKey,",
						"          CustomerKey = ReadSales@CustomerKey,",
						"          SalesAmount,",
						"          EnglishProductName,",
						"          FullName",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df016Join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Sales_Join",
								"type": "DatasetReference"
							},
							"name": "ReadSales"
						},
						{
							"dataset": {
								"referenceName": "DF_Product_join",
								"type": "DatasetReference"
							},
							"name": "ReadProducts"
						},
						{
							"dataset": {
								"referenceName": "DF_Coustome_Join",
								"type": "DatasetReference"
							},
							"name": "ReadCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Join",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinProduct"
						},
						{
							"name": "joinCustomer"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as short,",
						"          CustomerKey as short,",
						"          SalesAmount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadSales",
						"source(output(",
						"          ProductKey as short,",
						"          EnglishProductName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadProducts",
						"source(output(",
						"          CustomerKey as short,",
						"          FullName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadCustomer",
						"ReadSales, ReadProducts join(ReadSales@ProductKey == ReadProducts@ProductKey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProduct",
						"joinProduct, ReadCustomer join(ReadSales@CustomerKey == ReadCustomer@CustomerKey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCustomer",
						"joinCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductKey = ReadSales@ProductKey,",
						"          CustomerKey = ReadSales@CustomerKey,",
						"          SalesAmount,",
						"          EnglishProductName,",
						"          FullName",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df017Exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Sales",
								"type": "DatasetReference"
							},
							"name": "ReadSales"
						},
						{
							"dataset": {
								"referenceName": "DF_Product",
								"type": "DatasetReference"
							},
							"name": "ReadProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Exists",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "existsproduct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductKey as short,",
						"          CustomerKey as short,",
						"          SalesAmount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadSales",
						"source(output(",
						"          ProductKey as short,",
						"          EnglishProductName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadProducts",
						"ReadSales, ReadProducts exists(ReadSales@ProductKey == ReadProducts@ProductKey,",
						"     negate:false,",
						"     broadcast: 'auto')~> existsproduct",
						"existsproduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df018Flatten')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Json",
								"type": "DatasetReference"
							},
							"name": "ReadJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Faltten",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flattenJson"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderId as integer,",
						"          OrderDate as string,",
						"          Items as string[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> ReadJson",
						"ReadJson foldDown(unroll(Items),",
						"     mapColumn(",
						"          OrderId,",
						"          OrderDate,",
						"          Items",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJson",
						"flattenJson sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df018Parse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Order_Excel",
								"type": "DatasetReference"
							},
							"name": "ReadExcel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Parse",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "parse1"
						},
						{
							"name": "parseJson"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderId as integer,",
						"          OrderDate as date,",
						"          OrderDetails as string,",
						"          BatchDetails as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadExcel",
						"ReadExcel parse(OrderDet = OrderDetails ? (Item as string,",
						"          Qty as integer,",
						"          Price as integer),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parse1",
						"parse1 parse(BatchDet = BatchDetails ? (batchid as integer,",
						"          site as string),",
						"     format: 'json',",
						"     documentForm: 'arrayOfDocuments') ~> parseJson",
						"parseJson sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OrderId,",
						"          OrderDate,",
						"          Item = OrderDet.Item,",
						"          batchid = BatchDet.batchid,",
						"          site = BatchDet.site,",
						"          Qty = OrderDet.Qty,",
						"          Price = OrderDet.Price",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df020Stringify')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_Emp_Json",
								"type": "DatasetReference"
							},
							"name": "ReadJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_Stringify",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "stringify1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          salary as integer,",
						"          phone as (mobile as integer, home as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> ReadJson",
						"ReadJson stringify(Phones = phone ? string,",
						"     format: 'json') ~> stringify1",
						"stringify1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          salary,",
						"          Phones",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dff015cast')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_INPUT",
								"type": "DatasetReference"
							},
							"name": "ReadCSv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_CAST",
								"type": "DatasetReference"
							},
							"name": "sinkCast"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderDate as string,",
						"          ProductKey as string,",
						"          Country as string,",
						"          EnglishProductName as string,",
						"          SalesAmount as string,",
						"          TaxAmt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadCSv",
						"ReadCSv cast(output(",
						"          OrderDate as date 'dd-MM-yyyy',",
						"          ProductKey as short,",
						"          Country as string,",
						"          SalesAmount as double,",
						"          TaxAmt as double",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkCast"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dff07cast')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DF_INPUT",
								"type": "DatasetReference"
							},
							"name": "ReadCSv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DF_CAST",
								"type": "DatasetReference"
							},
							"name": "sinkCast"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderDate as string,",
						"          ProductKey as string,",
						"          Country as string,",
						"          EnglishProductName as string,",
						"          SalesAmount as string,",
						"          TaxAmt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReadCSv",
						"ReadCSv cast(output(",
						"          OrderDate as date 'dd-MM-yyyy',",
						"          ProductKey as short,",
						"          Country as string,",
						"          SalesAmount as double,",
						"          TaxAmt as double",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkCast"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/041pplFolderinsideFolder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetCountryFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_CB_OUTPUT",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "LoopCountry",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetCountryFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetCountryFolder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "StoreCountry",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "COUNTRY",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExecuteCountry",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "StoreCountry",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "041-1pplLastFolder",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParamCountry": {
												"value": "@variables('COUNTRY')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"COUNTRY": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-12T13:03:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/045pplDataFlows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df001intro",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df001Intro",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ReadCsv": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Transformation"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-13T11:13:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/046pplSelecttx')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df002Select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ReadCsv": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Transformation"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-29T12:11:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/047pplSortTX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df003SortTX",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ReadCSV": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Transformation"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-29T12:11:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/048pplFilter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df004Filter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ReadCsv": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Transformation"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-29T12:11:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/049pplDerivedColumnTX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df005DerivedColumn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ReadCsv": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Transformation"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-13T12:00:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/050pplCondSplitX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ppl50CondSplitX",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df006CondSplitX",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Readcsv": {},
									"sinkIndia": {},
									"sinkFrance": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Transformation"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-04T09:05:29Z"
			},
			"dependsOn": []
		}
	]
}